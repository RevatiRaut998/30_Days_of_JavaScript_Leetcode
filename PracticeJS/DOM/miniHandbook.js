/***************************************************************************************************
 üìò DOM (Document Object Model) ‚Äì Quick Reference Notes
***************************************************************************************************/

/*
DOM = Programming interface for HTML.
- Browser creates a "document" object for every web page.
- DOM represents the page as a tree of nodes (elements, text, comments).
- We can read and manipulate elements at runtime.
*/

/***************************************************************************************************
 üåç Window & Document
***************************************************************************************************/

// window ‚Üí global object created by browser
console.log(window.document);   // Full HTML
console.dir(window.document);   // Object with properties & methods

// console.log ‚Üí prints element
// console.dir ‚Üí prints object (explorable)

// Access body
console.log(document.body);     // HTML code
console.dir(document.body);     // Body object


/***************************************************************************************************
 üå± Nodes & DOM Tree
***************************************************************************************************/

/*
Types of nodes:
1. Element nodes (div, h1, p, etc.)
2. Text nodes   (whitespace, text content)
3. Comment nodes

Relations:
- Parent ‚Üí Child ‚Üí Sibling
- Example:
   <body>
      <div> ... </div>
      <script> ... </script>
   </body>
   ‚Üí body = parent, div & script = children/siblings
*/

console.dir(document.body.childNodes); // NodeList with text, elements, comments
console.dir(document.body.firstChild); // usually #text
console.dir(document.body.lastChild);  // often <script>
console.dir(document.querySelector("div").children); // HTMLCollection of child elements


/***************************************************************************************************
 üé® Dynamic DOM Manipulation
***************************************************************************************************/

// Change background at runtime
// document.body.style.background = "blue";

// Change text content
// document.querySelector("h1").innerText = "Updated Heading";

// Best practice: Place <script> before </body> (so DOM loads first)


/***************************************************************************************************
 üîé DOM Selection Methods
***************************************************************************************************/

/*
Old-school selections (HTMLCollection ‚Äì live):
----------------------------------------------
- getElementById("id")        ‚Üí single element or null
- getElementsByClassName("c") ‚Üí HTMLCollection
- getElementsByTagName("p")   ‚Üí HTMLCollection

Modern selections (NodeList ‚Äì static):
----------------------------------------------
- querySelector("css")        ‚Üí first match
- querySelectorAll("css")     ‚Üí NodeList of all matches
*/

// Examples:
let idElement     = document.getElementById("heading");
let classElements = document.getElementsByClassName("c1");
let tagElements   = document.getElementsByTagName("p");

let firstP        = document.querySelector("p");
let allP          = document.querySelectorAll("p");


/***************************************************************************************************
 üè∑Ô∏è DOM Properties
***************************************************************************************************/

// 1. tagName ‚Üí element‚Äôs tag
console.log(firstP.tagName); // "P"

// 2. innerText ‚Üí visible text (ignores hidden)
console.log(document.querySelector("div").innerText);

// 3. innerHTML ‚Üí HTML inside element
console.log(document.querySelector("div").innerHTML);

// 4. textContent ‚Üí all text, including hidden
let hidden = document.querySelector("h3");
console.log(hidden.textContent);


/***************************************************************************************************
 üîÑ Multiple Element Manipulation
***************************************************************************************************/

let divs = document.querySelectorAll(".box");

// Manual way
// divs[0].innerText = "Value 1";
// divs[1].innerText = "Value 2";

// Loop way (scalable)
let idx = 1;
for (let div of divs) {
   div.innerText = `New Value ${idx}`;
   idx++;
}


/***************************************************************************************************
 ‚ö° DOM Interview Cheat Sheet
***************************************************************************************************/

/*
‚úî getElementById ‚Üí single element
‚úî getElementsByClassName / getElementsByTagName ‚Üí HTMLCollection (live)
‚úî querySelector ‚Üí first match
‚úî querySelectorAll ‚Üí NodeList (static)
‚úî innerText ‚Üí visible text only
‚úî textContent ‚Üí all text (even hidden)
‚úî innerHTML ‚Üí HTML markup inside
‚úî .children ‚Üí HTMLCollection of element children
‚úî .firstChild / .lastChild ‚Üí first/last node (may be text/comment)
*/

/*======================================================================================
 üîπ ATTRIBUTES
======================================================================================*/

// 1. getAttribute(attr) ‚Üí Gets attribute value
let div = document.querySelector("div");
div.getAttribute("id");    // "product"
div.getAttribute("name");  // "JSName"

// 2. setAttribute(attr, value) ‚Üí Sets/updates attribute
let para = document.querySelector("p");
para.setAttribute("class", "newClass"); // replaces class

/*
‚ö†Ô∏è Note:
- getAttribute works with HTML attributes.
- setAttribute overrides existing values (dangerous for "class").
- Use classList for safe class handling (preferred).
*/

/*======================================================================================
 üîπ STYLING
======================================================================================*/

// 1. Inline styling via .style
let box = document.querySelector("#box");
box.style.backgroundColor = "violet"; // Direct inline style

// 2. className ‚Üí Replace all classes
box.className = "container highlighted"; // overwrites all

// 3. classList ‚Üí Add/remove/toggle safely
box.classList.add("active");
box.classList.remove("hidden");
box.classList.toggle("collapsed");

/*
üëâ Rule of thumb:
- Use .style for unique/computed inline values.
- Use .classList for scalable, state-driven styles.
- Use .className only when replacing ALL classes.
*/

/*======================================================================================
 üîπ INSERT ELEMENTS
======================================================================================*/

// Create element
let btn = document.createElement("button");
btn.innerText = "Click Me!";

// Insert methods
box.append(btn);     // Inside, at end
box.prepend(btn);    // Inside, at start
box.before(btn);     // Outside, before node
box.after(btn);      // Outside, after node

// Example: Adding heading at start of body
let h1 = document.createElement("h1");
h1.innerHTML = "<i>Hi, I am new!</i>";
document.body.prepend(h1);

/*
üìå Related:
- appendChild(el) ‚Äì similar to append(), older API.
- removeChild(el) ‚Äì removes child via parent.
*/

/*======================================================================================
 üîπ DELETE ELEMENTS
======================================================================================*/

// node.remove() ‚Üí Deletes element
// btn.remove();

/*======================================================================================
 üîπ PRACTICE EXAMPLES
======================================================================================*/

// Task 1: Add button at top of body
let btn2 = document.createElement("button");
btn2.innerText = "Click Me!";
btn2.style.backgroundColor = "red";
btn2.style.color = "white";
document.body.prepend(btn2);

// Task 2: Add styled <p> with class
let newPara = document.createElement("p");
newPara.innerText = "Long sample text‚Ä¶";
newPara.style.backgroundColor = "lightgreen";
newPara.style.fontFamily = "Arial";
newPara.style.color = "white";

box.after(newPara);

// Best way: Add class (without overwriting)
newPara.classList.add("paraClass");
// Remove class if needed
// newPara.classList.remove("paraClass");

/*
‚ö†Ô∏è Inline styles > CSS styles (except with !important in CSS).
*/

/***************************************************************************************************
 ‚úÖ End of Notes
***************************************************************************************************/
